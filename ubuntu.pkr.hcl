variable "cpus" {}
variable "disk_size" {}
variable "headless" {}
variable "hostname" {}
variable "http_proxy" {}
variable "https_proxy" {}
variable "iso_checksum" {}
variable "iso_checksum_type" {}
variable "iso_url" {}
variable "memory" {}
variable "no_proxy" {}
variable "ssh_fullname" {}
variable "ssh_password" {}
variable "ssh_username" {}
variable "update" {}
variable "version" {}
variable "virtualbox_guest_os_type" {}
variable "vm_name" {}
variable "home" {}


source "virtualbox-iso" "autogenerated_1" {
  boot_command = [
    "<esc><esc><enter><wait>",
    "/install/vmlinuz noapic ",
    "initrd=/install/initrd.gz ",
    "install auto=true priority=critical preseed/url=http://172.20.10.5:{{.HTTPPort}}/preseed.cfg<enter>",
    "debian-installer=fr_FR auto locale=fr_FR kbd-chooser/method=fr ",
    "hostname=${var.hostname} ",
    "grub-installer/bootdev=/dev/sda<wait> ",
    "fb=false debconf/frontend=noninteractive ",
    "keyboard-configuration/modelcode=SKIP keyboard-configuration/layout=fr",
    "keyboard-configuration/variant=FR console-setup/ask_detect=false ",
    "packer-plugin-virtualbox_v1.0.5_x5.0_windows_amd64.exe",
    "passwd/user-fullname=${var.ssh_fullname} ",
    "passwd/user-password=${var.ssh_password} ",
    "passwd/user-password-again=${var.ssh_password} ",
    "passwd/username=${var.ssh_username} ",
    "<wait><enter>"
  ]

  disk_size               = "${var.disk_size}"
  guest_os_type           = "${var.virtualbox_guest_os_type}"
  hard_drive_interface    = "sata"
  headless                = "${var.headless}"
  http_directory          = "./http"
  iso_checksum            = "${var.iso_checksum_type}:${var.iso_checksum}"
  iso_urls                = [
    "${var.iso_url}"
  ]
  output_directory        = "output3" #nhotha f var w naadiha fl build command
  shutdown_command        = "echo '${var.ssh_password}'|sudo -S shutdown -P now" #nrodha sensitive
  ssh_username            = "${var.ssh_username}"
  ssh_password            = "${var.ssh_password}"
  ssh_wait_timeout        = "10000s"
  guest_additions_mode    = "disable"
  vboxmanage             = [
    ["modifyvm", "{{ .Name }}", "--audio", "none"], 
    ["modifyvm", "{{ .Name }}", "--usb", "off"], 
    #vram: c quoi 
    ["modifyvm", "{{ .Name }}", "--vram", "12"], #variable
    ["modifyvm", "{{ .Name }}", "--vrde", "off"], 
    // ["modifyvm", "{{ .Name }}", "--nictype1", "virtio"], 
    ["modifyvm", "{{.Name}}", "--nic1", "bridged"],
    ["modifyvm", "{{.Name}}", "--bridgeadapter1", "Intel(R) Wi-Fi 6 AX201 160MHz"],
    ["modifyvm", "{{ .Name }}", "--memory", "${var.memory}"], 
    ["modifyvm", "{{ .Name }}", "--cpus", "${var.cpus}"],
    // ["modifyvm", "{{ .Name }}", "--natpf1", "guestssh,tcp,,2236,,22"]
  ]
  virtualbox_version_file = ".vbox_version"
  vm_name                 = "${var.vm_name}"
  format                  = "ova"
}





build {
  sources = ["source.virtualbox-iso.autogenerated_1"]
  //   provisioner "file" {
  //   source      = "script/configure-network.sh"
  //   destination = "/tmp/configure-network.sh"
  // }

  // provisioner "shell" {
  //   inline = ["sudo bash /tmp/configure-network.sh"]
  // }

  // provisioner "shell"{
  //   inline = ["sudo apt update",
  //   "sudo apt -qq -y install software-properties-common git ansible network-manager 2>&1 >/dev/null",
  //   "sed -i s/ens3/enp1s0/g /etc/netplan/01-netcfg.yaml"]
  // }

  
  provisioner "file" {
  source      = ".ssh/id_ed25519.pub"
  destination = "/tmp/id_ed25519.pub"
}

# Provision the VM with the copied key
provisioner "shell" {
  inline = [
    "mkdir -p /home/ubuntu/.ssh",
    "chmod 700 /home/ubuntu/.ssh",
    "cat /tmp/id_ed25519.pub >> /home/ubuntu/.ssh/authorized_keys",
    "chmod 600 /home/ubuntu/.ssh/authorized_keys",
    "chown -R ubuntu:ubuntu /home/ubuntu/.ssh"
  ]
}

  provisioner "shell" {
    environment_vars  = [
      "DEBIAN_FRONTEND=noninteractive", 
      "UPDATE=${var.update}", 
      "SSH_USERNAME=${var.ssh_username}", 
      "SSH_PASSWORD=${var.ssh_password}", 
      "http_proxy=${var.http_proxy}", 
      "https_proxy=${var.https_proxy}", 
      "no_proxy=${var.no_proxy}"
    ]
    execute_command   = "echo '${var.ssh_password}'|{{ .Vars }} sudo -E -S bash '{{ .Path }}'"
    expect_disconnect = true
    scripts           = [
      "script/wait-for-ssh.sh", 
      "script/update.sh", 
      "script/cleanup.sh",
      "script/ssh.sh"
    ]
  }


}
